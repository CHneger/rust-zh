<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx11.dtd">
<tmx version="1.1">
  <header creationtool="OmegaT" o-tmf="OmegaT TMX" adminlang="EN-US" datatype="plaintext" creationtoolversion="3.1.8" segtype="sentence" srclang="EN-US"/>
  <body>
<!-- Default translations -->
    <tu>
      <tuv lang="EN-US">
        <seg># Hello, Cargo!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T100548Z" creationid="LIIGO" creationdate="20141130T100548Z">
        <seg># 你好，Cargo！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Installing Rust</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T015915Z" creationid="LIIGO" creationdate="20141123T015915Z">
        <seg># 安装 Rust</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Ownership</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T141627Z" creationid="LIIGO" creationdate="20141108T141627Z">
        <seg> Ownership</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg># Tools</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T131941Z" creationid="LIIGO" creationdate="20141108T131941Z">
        <seg># 工具</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>% A 30-minute Introduction to Rust</seg>
      </tuv>
      <tuv lang="ZH" changeid="liigo" changedate="20141107T144944Z" creationid="liigo" creationdate="20141107T144944Z">
        <seg>% 30分钟认识Rust语言</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>% The Rust Guide</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T014023Z" creationid="LIIGO" creationdate="20141123T014023Z">
        <seg>% Rust入门教程</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(If you're concerned about `curl | sudo sh`, please keep reading.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T020206Z" creationid="LIIGO" creationdate="20141123T020206Z">
        <seg>（如果你担心`curl | sudo sh`，请继续往前看。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>(Rust's tooling does
[play nice with external libraries written in those
tools](http://crates.io/native-build.html), if you need to.)</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T141645Z" creationid="LIIGO" creationdate="20141108T141310Z">
        <seg>（但是如果需要，Rust的工具可以跟他们[和平相处](http://crates.io/native-build.html)。）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&gt; TOML aims to be a minimal configuration file format that's easy to read due
&gt; to obvious semantics.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T103013Z" creationid="LIIGO" creationdate="20141130T102949Z">
        <seg>&gt; TOML 的目标是成为一个语义直观、易于阅读的最小化配置文件格式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>&gt; TOML should be easy to parse into data structures in a wide variety of
&gt; languages.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T103128Z" creationid="LIIGO" creationdate="20141130T103119Z">
        <seg>&gt; TOML应当很容易被各种语言解析成为它们自己的数据结构。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>A
place for everything, and everything in its place.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T102549Z" creationid="LIIGO" creationdate="20141130T102351Z">
        <seg>所有文件都在项目根目录内，分门别类存放在不同的位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Again, we'll discuss the exact details of all of this syntax soon.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T135026Z" creationid="LIIGO" creationdate="20141108T135026Z">
        <seg>后面再讲具体的语法细节。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And printing information to the screen is a pretty
common thing to do.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T024603Z" creationid="LIIGO" creationdate="20141123T024603Z">
        <seg>而且，打印文本信息到屏幕上是再正常不过的事情了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And they should be!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T021306Z" creationid="LIIGO" creationdate="20141123T021306Z">
        <seg>有这种担心是正常的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>And we
promise that this method will not be the way to install Rust forever: it's just
the easiest way to keep people updated while Rust is in its alpha state.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T021551Z" creationid="LIIGO" creationdate="20141123T021551Z">
        <seg>我们承诺这种脚本安装方式不会永远持续下去：它仅仅是目前Alpha 阶段最简单的升级方式而已。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Anyway, there are two **table**s in this file: `package` and `bin`.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T103340Z" creationid="LIIGO" creationdate="20141130T103340Z">
        <seg>好吧，上面编辑的Cargo.toml文件里有两个表（table）：`package` 和 `bin`。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>At first, your
program doesn't have any dependencies, so we'll only be using the first part of
its functionality.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T100933Z" creationid="LIIGO" creationdate="20141130T100933Z">
        <seg>最开始的时候，你的程序可能不需要什么依赖，所以我们暂时只用到第一个功能。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Bam!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T103745Z" creationid="LIIGO" creationdate="20141130T103745Z">
        <seg>耶！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Basically,
when you do this, you are trusting that the good people who maintain Rust
aren't going to hack your computer and do bad things.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T021330Z" creationid="LIIGO" creationdate="20141123T021330Z">
        <seg>因为按照上面那样安装，就得首先信任下载下来的脚本是无害的，信任 Rust 维护者不会入侵你的电脑做坏事。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because this is about high-level concepts, you don't need to actually install
Rust to follow along.</seg>
      </tuv>
      <tuv lang="ZH" changeid="liigo" changedate="20141107T145127Z" creationid="liigo" creationdate="20141107T145127Z">
        <seg>本文仅介绍高层概念，不涉及具体的编程细节，因而你甚至不需要安装Rust。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Because we only specified a repository without a version, if someone else were
to try out our project at a later date, when `semver` was updated, they would
get a different, possibly incompatible version.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T135856Z" creationid="LIIGO" creationdate="20141108T135651Z">
        <seg>因为我们没有指定外部库的版本号（意味着总是采用其最新版），一旦该库被作者升级（且不兼容旧版），我们的项目将受到影响。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>But these are the ones most likely to work, as they have the most
testing.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T021944Z" creationid="LIIGO" creationdate="20141123T021944Z">
        <seg>Rust在上述三大平台工作的最好，因为测试最充分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cargo expects your source files to live inside a `src` directory.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T102103Z" creationid="LIIGO" creationdate="20141130T102103Z">
        <seg>Cargo 期望源文件放在 `src` 目录下。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cargo generated a 'hello world' for us.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T133526Z" creationid="LIIGO" creationdate="20141108T133526Z">
        <seg>Cargo自动生成了这句输出“hello world”的代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cargo helps us keep our projects nice and tidy.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T102358Z" creationid="LIIGO" creationdate="20141130T102242Z">
        <seg>Cargo帮助我们保持项目结构整洁美观。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cargo is currently in an alpha state, just like Rust, and so it
is still a work in progress.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T100720Z" creationid="LIIGO" creationdate="20141130T100720Z">
        <seg>跟 Rust 一样，Cargo 目前处于 alpha 阶段，也就是正在进行中的项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Cargo manages three things: building your code, downloading the dependencies
your code needs, and building the dependencies your code needs.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T100851Z" creationid="LIIGO" creationdate="20141130T100851Z">
        <seg>Cargo 管理三件事情：构建代码、下载依赖、构建依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Click
that link, and you'll be chatting with other Rustaceans (a silly nickname we
call ourselves), and we can help you out.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T023757Z" creationid="LIIGO" creationdate="20141123T023757Z">
        <seg>点击链接，您就可以跟Rust亲们（Rustaceans）在线交谈，并寻求帮助。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Congrats!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T023209Z" creationid="LIIGO" creationdate="20141123T023209Z">
        <seg>恭喜。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Congratulations!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T072150Z" creationid="LIIGO" creationdate="20141123T072150Z">
        <seg>恭喜！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Consult
the documentation for your shell for more details.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T063444Z" creationid="LIIGO" creationdate="20141123T063444Z">
        <seg>自己去查询终端相关文档吧。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Disclaimer
below.)</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T020301Z" creationid="LIIGO" creationdate="20141123T020301Z">
        <seg>后面会解释）</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Don't be scared of using macros.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070302Z" creationid="LIIGO" creationdate="20141123T070302Z">
        <seg>别怕使用Rust宏。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Each and every
commit is tested against Windows just like any other platform.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T022743Z" creationid="LIIGO" creationdate="20141123T022743Z">
        <seg>每一项新功能或改动都针对 Windows 做过测试，当然也在其他主要平台做过测试。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Easy enough!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070644Z" creationid="LIIGO" creationdate="20141123T070644Z">
        <seg>非常简单。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Enough about tools, let's talk code!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T141541Z" creationid="LIIGO" creationdate="20141108T141541Z">
        <seg>有关工具方面内容，告一段落，下面讲代码！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Even though our
program is simple, it's using much of the real tooling that you'll use for the
rest of your Rust career.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T111846Z" creationid="LIIGO" creationdate="20141130T111746Z">
        <seg>这个程序很简单，但用上Cargo这样真实可用的构建工具，为我们以后的 Rust 生涯打好基础。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Eventually, we'll add more.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T101301Z" creationid="LIIGO" creationdate="20141130T101007Z">
        <seg>往后程序会引入其他依赖。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Everything is a tradeoff in language design, and Rust has
made its choice.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T072135Z" creationid="LIIGO" creationdate="20141123T072135Z">
        <seg>在语言设计层面，所有东西都需要权衡，Rust 做了它自己的选择。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally,
we'll talk about how Rust breaks down the perceived dichotomy between speed
and safety.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T131931Z" creationid="LIIGO" creationdate="20141108T131931Z">
        <seg>最后，谈谈Rust怎样同时到高效和安全。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, a comment about Windows.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T022038Z" creationid="LIIGO" creationdate="20141123T022038Z">
        <seg>最后，补充一点关于 Windows 的说明。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, actually **compiling** and **running** our program.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T071035Z" creationid="LIIGO" creationdate="20141123T071035Z">
        <seg>最后，编译并运行我们写的代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Finally, the line ends with a semicolon (`;`).</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070731Z" creationid="LIIGO" creationdate="20141123T070731Z">
        <seg>接下来看到，这一行，以分号 `;` 结尾。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>First, let's check out `Cargo.toml`:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T133104Z" creationid="LIIGO" creationdate="20141108T133104Z">
        <seg>先看看`Cargo.toml`文件的内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For now,
let's compile and run it:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T135045Z" creationid="LIIGO" creationdate="20141108T135045Z">
        <seg>再次编译和运行：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>For our purposes, we don't need to worry
about this difference.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065859Z" creationid="LIIGO" creationdate="20141123T065859Z">
        <seg>就我们目前来看，我们没必要关心它们的不同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Getting started on a new Rust project is incredibly easy, thanks to Rust's
package manager, [Cargo](http://crates.io).</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T132334Z" creationid="LIIGO" creationdate="20141108T132334Z">
        <seg>因为有 [Cargo](http://crates.io)，Rust的包管理器（package manager），我们可以很容易的创建新的Rust项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Here's what's in `src/main.rs`:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T133431Z" creationid="LIIGO" creationdate="20141108T133431Z">
        <seg>再来看看`src/main.rs`文件内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Hey there!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T014035Z" creationid="LIIGO" creationdate="20141123T014035Z">
        <seg>嗨！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>However, it is already good enough to use for many
Rust projects, and so it is assumed that Rust projects will use Cargo from the
beginning.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T100742Z" creationid="LIIGO" creationdate="20141130T100742Z">
        <seg>然而，对很多 Rust 项目来说，它已经足够好了，所以我们从一开始就使用 Cargo 来管理我们的项目。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>I like
to make a `projects` directory in my home directory, and keep all my projects
there.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T024724Z" creationid="LIIGO" creationdate="20141123T024724Z">
        <seg>我喜欢在用户主目录（Home目录）下创建一个目录`projects`，来存放我的所有工程文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>I'm going to use the syntax `editor
filename` to represent editing a file in these examples, but you should use
whatever method you want.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T063632Z" creationid="LIIGO" creationdate="20141123T063615Z">
        <seg>我会使用 `editor filename` 这个语法来表示编辑一个文件，但你可以使用任何你喜欢的方法做的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If anything
does not work, it is a bug.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T022355Z" creationid="LIIGO" creationdate="20141123T022355Z">
        <seg>如果您遇到BUG，</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If it were a function instead, it
would look like this: `println()`.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065838Z" creationid="LIIGO" creationdate="20141123T065838Z">
        <seg>如果这里是一个函数，看起来就会是：`println()`。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If not, there are a number of places where you can get help.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T023252Z" creationid="LIIGO" creationdate="20141123T023140Z">
        <seg>如果没看到，您可以在下面这些地方寻求帮助：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you come from a dynamically typed language like Ruby, Python, or JavaScript,
you may not be used to these two steps being separate.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T071700Z" creationid="LIIGO" creationdate="20141123T071700Z">
        <seg>如果你来自动态语言（如 Ruby, Python 或 JavaScript）社区，你可能不习惯编译和执行两部分开。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you decide you don't want Rust anymore, we'll be a bit sad, but that's okay.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T020428Z" creationid="LIIGO" creationdate="20141123T020428Z">
        <seg>如果你不想要 Rust 了，也是可以的（虽然对我们来说有点沮丧）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you did, Rust has been installed successfully!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T023244Z" creationid="LIIGO" creationdate="20141123T023028Z">
        <seg>如果您看到了，说明Rust已经安装成功。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you give someone a `.rb` or `.py` or `.js` file, they need to have
Ruby/Python/JavaScript installed, but you just need one command to both compile
and run your program.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T072112Z" creationid="LIIGO" creationdate="20141123T072112Z">
        <seg>如果你给别人一个 `.rb` 、 `.py` 或 `.js` 文件，他需要事先安装 Ruby/Python/Javascript 才能运行（但也只需要一个命令即可编译运行）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you installed Rust some other way, you may
want to [check the Cargo
README](https://github.com/rust-lang/cargo#installing-cargo-from-nightlies)
for specific instructions about installing it.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T101658Z" creationid="LIIGO" creationdate="20141130T101658Z">
        <seg>如果你是用其它方式安装的 Rust，可以按照 [安装Cargo每日构建版](https://github.com/rust-lang/cargo#installing-cargo-from-nightlies) 中的说明进行安装。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you used the Windows installer, just re-run the `.exe` and it will give you
an uninstall option.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T020520Z" creationid="LIIGO" creationdate="20141123T020520Z">
        <seg>如果你使用的是 Windows ，只需要重新运行 `.exe` 文件，它会给你一个卸载选项。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you'd like to anyway, check out [the
homepage](http://rust-lang.org) for explanation.</seg>
      </tuv>
      <tuv lang="ZH" changeid="liigo" changedate="20141107T145313Z" creationid="liigo" creationdate="20141107T145313Z">
        <seg>其他内容可参考[Rust官方网站](http://rust-lang.org)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're on
Linux or a Mac, all you need to do is this (note that you don't need to type
in the `$`s, they just indicate the start of each command):</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T020002Z" creationid="LIIGO" creationdate="20141123T020002Z">
        <seg>如果你使用 Linux 或 Mac，你需要做的仅仅是（注意，你不需要输入`$`符号，它标识一个命令行的开始）：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're on Windows and not using PowerShell, the `~` may not work.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T063435Z" creationid="LIIGO" creationdate="20141123T063435Z">
        <seg>如果你使用 Windows，又没有使用 PowerShell 的话，`~` 可能不起作用。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're on Windows, please download either the [32-bit
installer](https://static.rust-lang.org/dist/rust-nightly-i686-w64-mingw32.exe)
or the [64-bit
installer](https://static.rust-lang.org/dist/rust-nightly-x86_64-w64-mingw32.exe)
and run it.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T020359Z" creationid="LIIGO" creationdate="20141123T020359Z">
        <seg>如果你使用Windows，可以下载[32-bit
installer](https://static.rust-lang.org/dist/rust-nightly-i686-w64-mingw32.exe)
或 [64-bit
installer](https://static.rust-lang.org/dist/rust-nightly-x86_64-w64-mingw32.exe)
并运行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're one of those people, please check out the documentation on [building
Rust from Source](https://github.com/rust-lang/rust#building-from-source), or
[the official binary downloads](http://www.rust-lang.org/install.html).</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T021459Z" creationid="LIIGO" creationdate="20141123T021459Z">
        <seg>对于有这种疑虑的人，可以 [从源码构建
Rust](https://github.com/rust-lang/rust#building-from-source) ，或者直接下载
[官方二进制包](http://www.rust-lang.org/install.html) 安装。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you're using more than one word
in your file name, use an underscore.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T063926Z" creationid="LIIGO" creationdate="20141123T063926Z">
        <seg>如果你使用多个单词为您的文件命名，可使用下划线分隔。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>If you've got Rust installed, you can open up a shell, and type this:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T022805Z" creationid="LIIGO" creationdate="20141123T022805Z">
        <seg>你已经装上 Rust 了，现在你可以打开一个终端，输入：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It
accomplishes these goals by being memory safe without using garbage collection.</seg>
      </tuv>
      <tuv lang="ZH" changeid="liigo" changedate="20141107T145021Z" creationid="liigo" creationdate="20141107T145021Z">
        <seg>它不使用垃圾收集器（GC），同时做到了内存安全。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It does not require prior experience with systems programming, but you
may find the syntax easier if you've used a 'curly brace' programming language
before, like C or JavaScript.</seg>
      </tuv>
      <tuv lang="ZH" changeid="liigo" changedate="20141107T145055Z" creationid="liigo" creationdate="20141107T145055Z">
        <seg>阅读本文不需要您有系统级编程的经验，但如果您曾经用过C或JavaScript之类编程语言，将更有利于接受Rust的类似语法。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It is also considered good
style to put the opening curly brace on the same line as the function
declaration, with one space in between.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065215Z" creationid="LIIGO" creationdate="20141123T065215Z">
        <seg>而且建议将 `{` 放在与函数声明同一行，`{` 前面放一个空格。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>It's
traditional to make your first program in any new language one that prints the
text "Hello, world!" to the screen.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T024332Z" creationid="LIIGO" creationdate="20141123T024332Z">
        <seg>打印文字“Hello, world!”到屏幕上，是学习一门新语言的传统。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just know that sometimes, you'll see a `!`, and that
means that you're calling a macro instead of a normal function.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065942Z" creationid="LIIGO" creationdate="20141123T065942Z">
        <seg>只需知道，当你看到`!`时，意味着你在使用一个宏，而不是一个函数。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just pass an argument to
the script:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T020503Z" creationid="LIIGO" creationdate="20141123T020503Z">
        <seg>只需要传一个参数给脚本：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Just using `rustc` is nice for simple things, but as
your project grows, you'll want something to help you manage all of the options
that it has, and to make it easy to share your code with other people and
projects.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T072631Z" creationid="LIIGO" creationdate="20141123T072631Z">
        <seg>对写小程序来说，只使用 `rustc` 就够了。但当你的工程变得越来越大，你会希望有个东西能够帮助管理工程的方方面面，同时也能够将自己的代码方便地分享给他人。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's
do that part first:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T101959Z" creationid="LIIGO" creationdate="20141130T101959Z">
        <seg>先做第二件事：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's check out what Cargo has generated for us:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T132759Z" creationid="LIIGO" creationdate="20141108T132759Z">
        <seg>执行上述命令之后，看看Cargo生成了什么目录和文件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's compile and run it:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T133740Z" creationid="LIIGO" creationdate="20141108T133740Z">
        <seg>让我们编译并运行它：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's convert Hello World to Cargo.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T101434Z" creationid="LIIGO" creationdate="20141130T101434Z">
        <seg>现在我们把刚才的 Hello World 转换到Cargo。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's go over what just happened in detail.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T064446Z" creationid="LIIGO" creationdate="20141123T064420Z">
        <seg>让我们仔细看看刚才做了什么。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's go!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T015901Z" creationid="LIIGO" creationdate="20141123T015901Z">
        <seg>那就开始吧！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's let
it explain itself to you:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T102903Z" creationid="LIIGO" creationdate="20141130T102825Z">
        <seg>对TOML的简要说明如下：：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Let's make a new source file next.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T063525Z" creationid="LIIGO" creationdate="20141123T063525Z">
        <seg>下面我们创建一个源文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Luckily for us, the script we ran to install
Rust includes Cargo by default.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T101502Z" creationid="LIIGO" creationdate="20141130T101502Z">
        <seg>幸运的是，用前面脚本安装的 Rust 里面已经默认包含 Cargo 了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Make sure to get this name right: you need the capital `C`!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T102635Z" creationid="LIIGO" creationdate="20141130T102635Z">
        <seg>请确保文件名正确：第一个字母 `C` 要大写。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Most lines of Rust code end with a `;`.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070942Z" creationid="LIIGO" creationdate="20141123T070942Z">
        <seg>大多数 Rust 代码都以 `;` 结尾。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next up is this line:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065235Z" creationid="LIIGO" creationdate="20141123T065235Z">
        <seg>接着看下面这行：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, I'd like to introduce you to another tool, Cargo, which is used to write
real-world Rust programs.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T072419Z" creationid="LIIGO" creationdate="20141123T072419Z">
        <seg>下面，我会介绍一个工具，Cargo，它用于编写真正的Rust程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, `"Hello, world!"` is a **string**.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070407Z" creationid="LIIGO" creationdate="20141123T070407Z">
        <seg>接下来，`"Hello, world!"` 是一个 **字符串（string）**。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, our configuration file:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T102604Z" creationid="LIIGO" creationdate="20141130T102604Z">
        <seg>下一步编辑配置文件：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Next, we'll introduce you to a tool that's useful for
writing real-world Rust programs and libraries: "Cargo." After that, we'll talk
about the basics of Rust, write a little program to try them out, and then learn
more advanced things.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T015659Z" creationid="LIIGO" creationdate="20141123T015659Z">
        <seg>然后，我们会介绍在实际开发中非常有用的工具：Cargo （程序和库皆适用）。然后，我们会谈到 Rust 的基础，用一个小程序来试验。然后再学习一些高级的特性。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Not every programming language is great for everyone.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T020443Z" creationid="LIIGO" creationdate="20141123T020443Z">
        <seg>不是每种编程语言都适合每一个人。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that you have Rust installed, let's write your first Rust program.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T024204Z" creationid="LIIGO" creationdate="20141123T024059Z">
        <seg>已经安装好Rust，我们现在开始写第一个 Rust 程序吧。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that you've got the tools down, let's actually learn more about the Rust
language itself.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T111831Z" creationid="LIIGO" creationdate="20141130T111831Z">
        <seg>既然你会使用这个工具了，那么就让我们开始学习更多 Rust 语言的内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now that you've got your file open, type this in:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T064012Z" creationid="LIIGO" creationdate="20141123T064012Z">
        <seg>然后，打开这个文件，在里面输入：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Now, you can pull in that library using `extern crate` in
`main.rs`.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T134942Z" creationid="LIIGO" creationdate="20141108T134837Z">
        <seg>现在可以在`main.rs`文件里使用`semver`库（ `extern crate semver;`）：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Oh, we should also mention the officially supported platforms:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T021606Z" creationid="LIIGO" creationdate="20141123T021606Z">
        <seg>目前，Rust 官方支持如下平台：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Once you have this file in place, we should be ready to build!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T103656Z" creationid="LIIGO" creationdate="20141130T103656Z">
        <seg>准备好这个文件，我们可以开始构建了！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>One
last thing to mention: Rust's macros are significantly different than C macros,
if you've used those.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070240Z" creationid="LIIGO" creationdate="20141123T070240Z">
        <seg>最后一件事情要注意的是： Rust 的宏与 C 语言的宏明显不同。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Or on Windows:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T071403Z" creationid="LIIGO" creationdate="20141123T071403Z">
        <seg>Windows系统下这样查看：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Other great resources include [our
mailing list](https://mail.mozilla.org/listinfo/rust-dev), [the /r/rust
subreddit](http://www.reddit.com/r/rust), and [Stack
Overflow](http://stackoverflow.com/questions/tagged/rust).</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T024002Z" creationid="LIIGO" creationdate="20141123T024002Z">
        <seg>其他有用的资源还包括 [rust-dev邮件组](https://mail.mozilla.org/listinfo/rust-dev)、[Reddit的/r/rust频道](http://www.reddit.com/r/rust)，以及[Stack
Overflow](http://stackoverflow.com/questions/tagged/rust)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Please configure your editor of choice to insert four spaces
with the tab key.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065539Z" creationid="LIIGO" creationdate="20141123T065539Z">
        <seg>请配置您的编辑器，按下Tab键时自动输入4个空格。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Please let us know if that happens.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T022408Z" creationid="LIIGO" creationdate="20141123T022408Z">
        <seg>请报告给我们。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Put this inside:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T102703Z" creationid="LIIGO" creationdate="20141130T102703Z">
        <seg>加入如下内容：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Right now, we don't have any, so it's a bit sparse.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T104424Z" creationid="LIIGO" creationdate="20141130T104424Z">
        <seg>目前，我们并没有什么依赖，所以内容很少。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust
will output a binary executable.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T071326Z" creationid="LIIGO" creationdate="20141123T071326Z">
        <seg>Rust编译器将生成一个二进制可执行文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust considers Windows to be a first-class
platform upon release, but if we're honest, the Windows experience isn't as
integrated as the Linux/OS X experience is.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T022132Z" creationid="LIIGO" creationdate="20141123T022132Z">
        <seg>我们视 Windows 为第一级发布平台，但老实说，Rust 的 Windows 体验没有做到像 Linux/OS X 那样好。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust does not
require that you know a whole ton about the command line, but until the
language is in a more finished state, IDE support is spotty.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T063139Z" creationid="LIIGO" creationdate="20141123T063139Z">
        <seg>Rust也不要求您懂很多命令行操作，但是在语言还没有正式发布之前，IDE支持度有限。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust does not care where your code lives.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T062737Z" creationid="LIIGO" creationdate="20141123T062737Z">
        <seg>Rust并不介意您把代码放在哪里。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust files always end in a `.rs` extension.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T063736Z" creationid="LIIGO" creationdate="20141123T063736Z">
        <seg>Rust 源文件扩展名固定是 `.rs`。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust implements
`println!` as a macro rather than a function for good reasons, but that's a
very advanced topic.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070108Z" creationid="LIIGO" creationdate="20141123T070108Z">
        <seg>Rust 将`println!`实现成一个宏（而不是一个函数），是有一些原因的，但涉比较高级的话题。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust is a modern systems programming language focusing on safety and speed.</seg>
      </tuv>
      <tuv lang="ZH" changeid="liigo" changedate="20141107T145001Z" creationid="liigo" creationdate="20141107T145001Z">
        <seg>Rust是一个先进的系统级编程语言，专注于安全和速度。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust is a systems programming language with a
focus on "high-level, bare-metal programming": the lowest level control a
programming language can give you, but with zero-cost, higher level
abstractions, because people aren't computers.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T014840Z" creationid="LIIGO" creationdate="20141123T014840Z">
        <seg>Rust 是一个关注于“高阶-裸机”的系统级编程语言——将对机器的低阶控制与对世界的高阶抽象结合在一起（人不是计算机，高级语言的作用即充当人与机器之间的翻译）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust is an
**ahead-of-time compiled language**, which means that you can compile a
program, give it to someone else, and they don't need to have Rust installed.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T071826Z" creationid="LIIGO" creationdate="20141123T071826Z">
        <seg>Rust 是一个编译型语言，意味着你可以编译生成一个可执行程序，把它分发给其他人，他们不需要安装 Rust就能运行。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust is an **expression
oriented** language, which means that most things are expressions.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070825Z" creationid="LIIGO" creationdate="20141123T070825Z">
        <seg>Rust 是一个 **面向表达式** 的语言，这意味着 Rust 中大多数东西都是表达式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust is still pre-1.0, and so people assume that you're using
a very recent Rust.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T020726Z" creationid="LIIGO" creationdate="20141123T020726Z">
        <seg>Rust 还没有发布 1.0 正式版，大家讨论问题一般都是基于最新版，所以你最好也升级到最新版。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust makes no
specific demands on your editing tooling, or where your code lives.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T063300Z" creationid="LIIGO" creationdate="20141123T063300Z">
        <seg>Rust对您的编辑器和代码存在哪个目录没有特殊要求。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Rust requires these around all function bodies.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065130Z" creationid="LIIGO" creationdate="20141123T065130Z">
        <seg>Rust 要求如此。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Save the file, and then type this into your terminal window:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T064045Z" creationid="LIIGO" creationdate="20141123T064045Z">
        <seg>保存文件，并在终端里面输入：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Since we started off by using
Cargo, it'll be easy to add later.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T101311Z" creationid="LIIGO" creationdate="20141130T101143Z">
        <seg>因为我们一开始就使用 Cargo，后面添加新的依赖也非常容易。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Sound good?</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T015858Z" creationid="LIIGO" creationdate="20141123T015858Z">
        <seg>听起来很有趣？</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Strings are a surprisingly complicated
topic in a systems programming language, and this is a **statically allocated**
string.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070526Z" creationid="LIIGO" creationdate="20141123T070526Z">
        <seg>字符串在系统级编程语言中是相当复杂的话题，这里的字符串是 **静态分配（statically allocated）** 的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Success!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T064324Z" creationid="LIIGO" creationdate="20141123T064324Z">
        <seg>成功！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>TOML is designed to map unambiguously to a hash table.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T103030Z" creationid="LIIGO" creationdate="20141130T102955Z">
        <seg>它被设计为能够明确无歧义地映射到哈希表结构。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>TOML is very similar to INI, but with some extra goodies.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T103230Z" creationid="LIIGO" creationdate="20141130T103230Z">
        <seg>TOML非常像 INI 格式，但多了一些好处。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That leaves
the top level for other things, like READMEs, license information, and anything
not related to your code.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T102205Z" creationid="LIIGO" creationdate="20141130T102205Z">
        <seg>留出上层目录放给其它文件，比如README、版权信息等与源代码无关的文件。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That makes you a
Rust programmer!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T072242Z" creationid="LIIGO" creationdate="20141123T072242Z">
        <seg>你已经变成一个 Rust 程序员咯！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That's a good instinct!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T021436Z" creationid="LIIGO" creationdate="20141123T021436Z">
        <seg>这是一种本能的自我保护。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>That's it!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T104500Z" creationid="LIIGO" creationdate="20141130T104500Z">
        <seg>好了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `;` is
used to indicate that this expression is over, and the next one is ready to
begin.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070927Z" creationid="LIIGO" creationdate="20141123T070927Z">
        <seg>分号 `;` 用于标识当前表达式结束，新的表达式准备开始。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The `main` function is special:
it's the beginning of every Rust program.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T064657Z" creationid="LIIGO" creationdate="20141123T064657Z">
        <seg>这个`main`函数比较特殊：它是每个 Rust 程序的开始（入口函数）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The concepts are more important than the syntax,
so don't worry if you don't get every last detail: you can read [the
Guide](guide.html) to get a more complete explanation.</seg>
      </tuv>
      <tuv lang="ZH" changeid="liigo" changedate="20141107T145108Z" creationid="liigo" creationdate="20141107T145108Z">
        <seg>概念比语法更重要，先不要拘泥于语法，必要时再去阅读[入门手册](guide.md)获得详细解释。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The easiest is
[the #rust IRC channel on irc.mozilla.org](irc://irc.mozilla.org/#rust), which
you can access through
[Mibbit](http://chat.mibbit.com/?server=irc.mozilla.org&amp;channel=%23rust).</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T023610Z" creationid="LIIGO" creationdate="20141123T023610Z">
        <seg>最简单的是
[the #rust IRC channel on irc.mozilla.org](irc://irc.mozilla.org/#rust)，通过[Mibbit](http://chat.mibbit.com/?server=irc.mozilla.org&amp;channel=%23rust)；</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first
tells Cargo metadata about your package.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T103555Z" creationid="LIIGO" creationdate="20141130T103441Z">
        <seg>第一个告诉 Cargo 这个包（package）的元信息。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first is that it's indented with four
spaces, not tabs.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065433Z" creationid="LIIGO" creationdate="20141123T065433Z">
        <seg>第一点是这一行用4个空格缩进，而不是一个Tab。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first line says "I'm declaring a
function named `main`, which takes no arguments and returns nothing." If there
were arguments, they would go inside the parentheses (`(` and `)`), and because
we aren't returning anything from this function, we've dropped that notation
entirely.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065000Z" creationid="LIIGO" creationdate="20141123T064825Z">
        <seg>第一行意思是“我声明了一个函数，名叫`main`，它没有参数，也不返回任何值”。 如果存在参数，就放在小括号 `(` 和 `)` 之间。在这个例子中，我们不准备返回什么东西，所以先不讲。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first step to using Rust is to install it!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T015926Z" creationid="LIIGO" creationdate="20141123T015926Z">
        <seg>使用 Rust 的第一步当然是安装！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first thing that we need to do is make a file to put our code in.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T024622Z" creationid="LIIGO" creationdate="20141123T024622Z">
        <seg>首先我们得建一个文件来放我们的代码。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The first thing we need to do to begin
using Cargo is to install Cargo.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T101445Z" creationid="LIIGO" creationdate="20141130T101445Z">
        <seg>第一件事情就是安装 Cargo。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The nice thing about starting with such a
simple program is that you can verify that your compiler isn't just installed,
but also working properly.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T024529Z" creationid="LIIGO" creationdate="20141123T024529Z">
        <seg>其作用在于让你确信编译器工作正常，而不仅仅是安装好了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second point is the `println!()` part.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065624Z" creationid="LIIGO" creationdate="20141123T065624Z">
        <seg>第二点是`println!()`。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>The second tells Cargo that we're
interested in building a binary, not a library (though we could do both!), as
well as what it is named.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T103531Z" creationid="LIIGO" creationdate="20141130T103531Z">
        <seg>第二个告诉 Cargo 我们要构建一个可执行文件，而不是一个库（其实我们都可以做到）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Then, we'll talk about Rust's most interesting feature, **ownership**, and
then discuss how it makes concurrency easier to reason about.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T131415Z" creationid="LIIGO" creationdate="20141108T131415Z">
        <seg>然后讲Rust最有趣的特性，**所有权（ownership）**，然后讲怎样方便的使用并发（concurrency）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are a number of
details that are important here.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065352Z" creationid="LIIGO" creationdate="20141123T065352Z">
        <seg>这里有好几个需要重点注意的地方。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are a number of ways to
install Rust, but the easiest is to use the `rustup` script.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T015948Z" creationid="LIIGO" creationdate="20141123T015948Z">
        <seg>有很多种方式可以安装 Rust，最简单的是使用`rustup`脚本。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There are now two files: our source code, with the `.rs` extension, and the
executable (`main.exe` on Windows, `main` everywhere else)</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T071513Z" creationid="LIIGO" creationdate="20141123T071513Z">
        <seg>有两个文件：以 `.rs` 扩展名结尾的源代码文件；可执行文件 （在 Windows 中是 `main.exe`，在其它平台中是 `main`）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There is a lot more here, and this is a whirlwind tour, but you should feel
right at home if you've used tools like [Bundler](http://bundler.io/),
[npm](https://www.npmjs.org/), or [pip](https://pip.pypa.io/en/latest/).</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T140618Z" creationid="LIIGO" creationdate="20141108T140618Z">
        <seg>还有很多内容，这里就不讲了。这只是一个简短的教材。如果您曾经用过[Bundler](http://bundler.io/)、
[npm](https://www.npmjs.org/)或[pip](https://pip.pypa.io/en/latest/)，会发现Cargo跟他们相似。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>There's no `Makefile`s or endless `autotools` output here.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T141415Z" creationid="LIIGO" creationdate="20141108T140707Z">
        <seg>这里没有`Makefile`和`autotools`。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These are the basics that will serve you well through the rest
of your time with Rust.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T112144Z" creationid="LIIGO" creationdate="20141130T112136Z">
        <seg>这些基础知识将有助于你今后学习和应用Rust语言。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>These lines define a **function** in Rust.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T064553Z" creationid="LIIGO" creationdate="20141123T064553Z">
        <seg>这几句Rust代码定义了一个 **函数（function）**。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This actually leads to one other concern we should address: this guide will
assume that you have basic familiarity with the command line.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T062939Z" creationid="LIIGO" creationdate="20141123T062923Z">
        <seg>本教程假设你熟悉一些基本的命令行操作。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This brings me to one other point: some people, and somewhat rightfully so, get
very upset when we tell you to `curl | sudo sh`.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T021247Z" creationid="LIIGO" creationdate="20141123T021152Z">
        <seg>有些朋友听说安装 Rust 需要使用 `curl | sudo sh`，会有抵触情绪。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This file is in the [TOML](https://github.com/toml-lang/toml) format.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T102744Z" creationid="LIIGO" creationdate="20141130T102744Z">
        <seg>这个文件用的是 [TOML](https://github.com/toml-lang/toml) 格式。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This file is used by Cargo to keep track of dependencies in your application.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T104350Z" creationid="LIIGO" creationdate="20141130T104350Z">
        <seg>这个文件被 Cargo 用来跟踪依赖关系。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This gives us repeatable builds.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T140042Z" creationid="LIIGO" creationdate="20141108T140042Z">
        <seg>以后编译时都固定采用此版本号，不受它们升级的影响。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This hasn't bought us a whole lot over our simple use
of `rustc`, but think about the future: when our project has more than one
file, we would need to call `rustc` twice, and pass it a bunch of options to
tell it to build everything together.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T104023Z" creationid="LIIGO" creationdate="20141130T104023Z">
        <seg>对这个例子而言，相比使用 `rustc`，并没有给我们带来额外的好处，但我们要为未来考虑：当项目有多个文件的时候，需要运行 `rustc` 两次，并给它传一堆参数，告诉它把所有东西构建到一起。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This introduction will give you a rough idea of what Rust is like, eliding many
details.</seg>
      </tuv>
      <tuv lang="ZH" changeid="liigo" changedate="20141107T145425Z" creationid="liigo" creationdate="20141107T145043Z">
        <seg>本文将向您粗略的介绍Rust是什么。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is all we need to get started.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T133033Z" creationid="LIIGO" creationdate="20141108T133033Z">
        <seg>就是这些。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is called a **manifest**, and it contains all of the metadata that Cargo
needs to compile your project.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T133403Z" creationid="LIIGO" creationdate="20141108T133403Z">
        <seg>`Cargo.toml`被称为**清单（manifest）**，它包含了编译此项目所需的所有元数据（metadata）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is calling a Rust **macro**,
which is how metaprogramming is done in Rust.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065750Z" creationid="LIIGO" creationdate="20141123T065750Z">
        <seg>它是一个 Rust **宏（Macro）**，用于支持Rust元编程（Metaprogramming）。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is similar to `gcc` or `clang`, if you come from a C or C++ background.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T071239Z" creationid="LIIGO" creationdate="20141123T071239Z">
        <seg>如果你有 C 或 C++ 背景，你会发现这个类似 `gcc` 或 `clang`。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This is the place to be if you'd like to
learn how to program in Rust.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T014813Z" creationid="LIIGO" creationdate="20141123T014813Z">
        <seg>如果你想学习如何使用 Rust 编程，那算是来对地方了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This line does all of the work in our little program.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065256Z" creationid="LIIGO" creationdate="20141123T065256Z">
        <seg>这一行是程序主体部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>This prints out our `Hello, world!` text to our terminal.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T071626Z" creationid="LIIGO" creationdate="20141123T071626Z">
        <seg>运行这个可执行文件，就打印出 `Hello, world!` 到终端里面来了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To Cargo-ify our project, we need to do two things: Make a `Cargo.toml`
configuration file, and put our source file in the right place.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T101840Z" creationid="LIIGO" creationdate="20141130T101840Z">
        <seg>为了把现有的项目Cargo化，需要做两件事：创建 `Cargo.toml` 配置文件，然后把源代码文件放到合适的位置。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To show off Rust, let's talk about how easy it is to get started with Rust.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T131054Z" creationid="LIIGO" creationdate="20141108T130849Z">
        <seg>我们先讲，开始使用Rust是很容易的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To show you how to get going with Rust, we're going to write the traditional
"Hello, World!" program.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T015626Z" creationid="LIIGO" creationdate="20141123T015626Z">
        <seg>为了展示如何开始使用 Rust，我们还是用最经典的 "Hello, World!" 做例子。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To solve this problem, Cargo
produces a file, `Cargo.lock`, which records the versions of any dependencies.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T135933Z" creationid="LIIGO" creationdate="20141108T135830Z">
        <seg>为了解决此问题，Cargo自动生成文件`Cargo.lock`，里面保存了本项目中所有依赖库的版本号。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>To start a new project with Cargo, use `cargo new`:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T132407Z" creationid="LIIGO" creationdate="20141108T132407Z">
        <seg>要创建新项目，执行命令 `cargo new`：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Try this:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T103722Z" creationid="LIIGO" creationdate="20141130T103722Z">
        <seg>尝试执行以下命令：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Using an external dependency in Rust is incredibly easy.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T133914Z" creationid="LIIGO" creationdate="20141108T133914Z">
        <seg>引用外部依赖项对Cargo来说是小菜一碟。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We build our project with `cargo build`, and run it with
`./target/hello_world`.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T103826Z" creationid="LIIGO" creationdate="20141130T103826Z">
        <seg>我们使用 `cargo build` 构建项目，用 `./target/hello_world` 来执行它。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We can compile
with our compiler, `rustc`, by passing it the name of our source file:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T071215Z" creationid="LIIGO" creationdate="20141123T071215Z">
        <seg>按如下方式编译，把源代码文件名当作参数传递给编译器`rustc`：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We extensively test Rust on these platforms, and a few others, too, like
Android.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T022015Z" creationid="LIIGO" creationdate="20141123T021702Z">
        <seg>我们在上述平台上充分测试过 Rust。在其他少数平台也做过一些测试，比如Android。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We pass
this string as an argument to `println!`, which prints the string to the
screen.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070654Z" creationid="LIIGO" creationdate="20141123T070616Z">
        <seg>我们把这个字符串作为参数传递给 `println!`，它把这个串打印到屏幕上。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We provide some [sample configurations for various
editors](https://github.com/rust-lang/rust/tree/master/src/etc).</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065611Z" creationid="LIIGO" creationdate="20141123T065611Z">
        <seg>我们提供了一些配置示例：[各种编辑器的配置](https://github.com/rust-lang/rust/tree/master/src/etc)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We really think Rust is
something special, and we hope you do too.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T014854Z" creationid="LIIGO" creationdate="20141123T014854Z">
        <seg>我们认为 Rust 真的很特别，在看完本教程之后，希望你也如此。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will cover this in-depth
later in the guide.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070951Z" creationid="LIIGO" creationdate="20141123T070951Z">
        <seg>后面我们还会深入了解。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We will talk more about different kinds of allocation later.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070545Z" creationid="LIIGO" creationdate="20141123T070545Z">
        <seg>后面我们还会谈到不同种类的内存分配。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We'll call our file `main.rs`:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T063634Z" creationid="LIIGO" creationdate="20141123T063634Z">
        <seg>我们创建的文件叫 `main.rs`：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We'll get to it later.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065010Z" creationid="LIIGO" creationdate="20141123T065010Z">
        <seg>后面再讲关于返回值的内容。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We'll get to the details
eventually, you'll just have to trust us for now.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070348Z" creationid="LIIGO" creationdate="20141123T070348Z">
        <seg>后面我们会深入了解的，现在你只要相信我们说的就行了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We'll talk more about the syntax here
later, but that's what Rust code looks like!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T133659Z" creationid="LIIGO" creationdate="20141108T133659Z">
        <seg>Rust源代码就是这个样子，后面还会讲到语法部分。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We're passing `--bin` because we're making a binary program: if we
were making a library, we'd leave it off.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T132637Z" creationid="LIIGO" creationdate="20141108T132637Z">
        <seg>这里传入参数`--bin`，是因为我们要创建一个可执行项目；如果要创建一个库，就不需要这个参数了。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We're working on it!</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T022216Z" creationid="LIIGO" creationdate="20141123T022216Z">
        <seg>我们还在努力改进。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>We've successfully built `hello_world` with Cargo.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T111138Z" creationid="LIIGO" creationdate="20141130T111138Z">
        <seg>好了！我们已经成功地使用 Carge 构建了 `hello_world`。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Welcome to the Rust guide.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T014046Z" creationid="LIIGO" creationdate="20141123T014046Z">
        <seg>欢迎阅读本 Rust 入门教程。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Welcome.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T072259Z" creationid="LIIGO" creationdate="20141123T072250Z">
        <seg>欢迎！</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>Which, at this
point, is often.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T020648Z" creationid="LIIGO" creationdate="20141123T020648Z">
        <seg>在现阶段可能会比较频繁的升级。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With Cargo, as our project grows, we can
just `cargo build` and it'll work the right way.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T104056Z" creationid="LIIGO" creationdate="20141130T104056Z">
        <seg>而使用 Cargo，随着项目增长，我们仍然只需要敲 `cargo build` 就可以了，它会工作得很好。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>With that said, let's make a directory in our projects directory.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T063406Z" creationid="LIIGO" creationdate="20141123T063406Z">
        <seg>闲话说完了，我们就先创建一个工程目录。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You add a line to
your `Cargo.toml`:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T134111Z" creationid="LIIGO" creationdate="20141108T134022Z">
        <seg>只需要在`Cargo.toml`文件里添加两行声明（[dependencies.*]）：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You added the `semver` library, which parses version numbers and compares them
according to the [SemVer specification](http://semver.org/).</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141108T134439Z" creationid="LIIGO" creationdate="20141108T134439Z">
        <seg>这里添加的依赖项，是`semver`库，用于解析和比较版本号，详见 [SemVer规范](http://semver.org/)。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can also run these examples on [play.rust-lang.org](http://play.rust-lang.org/) by clicking on the arrow that appears in the upper right of the example when you mouse over the code.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T064318Z" creationid="LIIGO" creationdate="20141123T064318Z">
        <seg>你也可以在[play.rust-lang.org](http://play.rust-lang.org/)里面运行以上代码，只需把鼠标移到代码块上点击右上角的箭头链接。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can re-run this script any time you want to update Rust.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T020610Z" creationid="LIIGO" creationdate="20141123T020610Z">
        <seg>在任何时候，你都可以重新执行这个脚本来升级 Rust。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You can see it with `ls`:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T071331Z" creationid="LIIGO" creationdate="20141123T071331Z">
        <seg>你可以输入 `ls` 查看：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You have officially written a Rust program.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T072219Z" creationid="LIIGO" creationdate="20141123T072219Z">
        <seg>你已经正式写完了一个 Rust 程序。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You should see some output that looks something like this:</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T023107Z" creationid="LIIGO" creationdate="20141123T022929Z">
        <seg>您会看到类似如下的输出：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You won't ever need
to touch this file yourself, just let Cargo handle it.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T104450Z" creationid="LIIGO" creationdate="20141130T104450Z">
        <seg>不要自己去创建这个文件，留给 Cargo 去处理。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You'll also note that the function is wrapped in curly braces (`{` and `}`).</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T065034Z" creationid="LIIGO" creationdate="20141123T065034Z">
        <seg>你可能还注意到了，函数体是由花括号 `{` 和 `}` 包起来的。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You'll also notice that Cargo has created a new file: `Cargo.lock`.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T104210Z" creationid="LIIGO" creationdate="20141130T104210Z">
        <seg>你会注意到 Cargo 生成了一个新文件，`Cargo.lock`：</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>You'll learn more when we talk about macros later.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T070152Z" creationid="LIIGO" creationdate="20141123T070152Z">
        <seg>等后面讲到宏时再说。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>[Cargo](http://crates.io) is a tool that Rustaceans use to help manage their
Rust projects.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141130T100642Z" creationid="LIIGO" creationdate="20141130T100642Z">
        <seg>[Cargo](http://crates.io) 是用来辅助管理 Rust 项目的工具。</seg>
      </tuv>
    </tu>
    <tu>
      <tuv lang="EN-US">
        <seg>`hello_world.rs` rather than
`helloworld.rs`.</seg>
      </tuv>
      <tuv lang="ZH" changeid="LIIGO" changedate="20141123T063957Z" creationid="LIIGO" creationdate="20141123T063957Z">
        <seg>`hello_world.rs`而不是`helloworld.rs`。</seg>
      </tuv>
    </tu>
<!-- Alternative translations -->
  </body>
</tmx>
